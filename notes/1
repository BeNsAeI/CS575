Class website: http://web.engr.oregonstate.edu/~mjb/cs575c/
Text Books: None
Test 1: May 4th


Use the following:
double prec = omp_get_wtick( );
double time0 = omp_get_wtime( );

Time things:
#include <omp.h>
double time0 = omp_get_wtime( );
// seconds
. . .
double time1 = omp_get_wtime( );
// seconds
fprintf( stderr, “Elapsed time = %10.2lf microseconds\n”, 1000000. * ( time1 – time0 ) );

- Timing is not very accurate
- try uptime load average: 0.22, 0.49, 0.52

Check for consistancy by running the program several times

- g++ -o proj proj.cpp -O3 -lm -fopenmp
- icpc -o proj proj.cpp -O3 -lm -openmp -align -qopt-report=3 -qopt-report-phase=vec

- Graphing:
 - Axis 1: Number of the threads
 - Axis 2: Size of the problem
 - Type: scatterplot
 - Graph 1: as is
 - Graph 2: switch rows and colomns

Run the same code several times with different arguments:

#!/bin/csh
#number of threads:

foreach t ( 1 2 4 6 8 )
 echo NUMT = $t
 g++ -DNUMT=$t prog.cpp -o prog -lm -fopenmp
 ./prog
end

 and
omp_set_num_threads( NUMT );

cshell:
#!/bin/csh
# number of threads:
foreach t ( 1 2 4 6 8 )
 echo NUMT = $t
 # number of subdivisions:
 foreach s ( 2 4 8 16 32 64 128 256 512 1024 2048 3072 4096 )
  echo NUMS = $s
  g++ -DNUMS=$s -DNUMT=$t prog.cpp -o prog -lm -fopenmp
  ./prog
 end
end

Bash:

#!/bin/bash
# number of threads:
for t in 1 2 4 6 8
 do
 echo NUMT = $t
 # number of subdivisions:
 for s in 2 4 8 16 32 64 128 256 512 1024 2048 3072 4096
  do
  echo NUMS = $s
  g++ -DNUMS=$s -DNUMT=$t prog.cpp -o prog -lm -fopenmp
  ./prog
 done
done

Python:

import os
for t in [ 1, 2, 4, 6, 8 ]:
 print "NUMT = %d" % t
 for s in [ 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 3072, 4096 ]:
  print "NUMS = %d" % s
  cmd = "g++ -DNUMS=%d -DNUMT=%d prog.cpp -o prog -lm -fopenmp" % ( s, t )
  os.system( cmd )
  cmd = "./prog"
  os.system( cmd )

* Cariage return issues:
- od -c loop.csh
- tr -d '\r' < loop.csh > loop1.csh
